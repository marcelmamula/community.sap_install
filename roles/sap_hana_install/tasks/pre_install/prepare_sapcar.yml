# SPDX-License-Identifier: Apache-2.0
---
# hdblcm prepare SAPCAR

- name: SAP HANA hdblcm prepare - SAPCAR defined - Prepare the SAPCAR executable if 'sap_hana_install_sapcar_filename' is defined
  when: sap_hana_install_sapcar_filename is defined
  block:

    - name: SAP HANA hdblcm prepare - SAPCAR defined - Check if the SAPCAR executable exists
      ansible.builtin.stat:
        path: "{{ __sap_hana_install_fact_software_directory }}/{{ sap_hana_install_sapcar_filename }}"
      register: __sap_hana_install_register_sapcar_stat

    - name: SAP HANA hdblcm prepare - SAPCAR defined - Fail if the SAPCAR executable does not exist
      ansible.builtin.fail:
        msg: "FAIL: The SAPCAR EXE file '{{ __sap_hana_install_fact_software_directory }}/{{ sap_hana_install_sapcar_filename }}' does not exist!"
      when: not __sap_hana_install_register_sapcar_stat.stat.exists

    # We cannot always use the SAPCAR executable in __sap_hana_install_fact_software_directory because there are
    # some configurations in which executing files in this directory is not possible. So we always copy SAPCAR
    # to directory 'sapcar' in sap_hana_install_software_extract_directory. We do not copy the SAPCAR checksum file.
    - name: SAP HANA hdblcm prepare - SAPCAR defined - Copy the SAPCAR executable to '{{ sap_hana_install_software_extract_directory }}/sapcar'
      ansible.builtin.copy:
        src: "{{ __sap_hana_install_fact_software_directory }}/{{ sap_hana_install_sapcar_filename }}"
        dest: "{{ sap_hana_install_software_extract_directory }}/sapcar/{{ sap_hana_install_sapcar_filename }}"
        remote_src: true
        owner: 'root'
        group: 'root'
        mode: '0755'

    - name: SAP HANA hdblcm prepare - SAPCAR defined - Separate file from directory names and add the global checksum file path
      ansible.builtin.set_fact:
        __sap_hana_install_fact_sapcar_dict_tmp: {
          dir: "{{ sap_hana_install_software_extract_directory }}/sapcar",
          file: "{{ sap_hana_install_sapcar_filename }}",
          checksum_file: "{{ sap_hana_install_global_checksum_file }}",
        }
      when: sap_hana_install_global_checksum_file is defined

    - name: SAP HANA hdblcm prepare - SAPCAR defined - Separate file from directory names and add the specific checksum file path
      ansible.builtin.set_fact:
        __sap_hana_install_fact_sapcar_dict_tmp: {
          dir: "{{ sap_hana_install_software_extract_directory }}/sapcar",
          file: "{{ sap_hana_install_sapcar_filename }}",
          checksum_file: "{{ __sap_hana_install_fact_software_directory }}/{{ sap_hana_install_sapcar_filename }}.sha256",
        }
      when: sap_hana_install_global_checksum_file is not defined

    - name: SAP HANA hdblcm prepare - SAPCAR defined - Create a list of one dict for checksum verification
      ansible.builtin.set_fact:
        __sap_hana_install_fact_sapcar_dict: "{{ __sap_hana_install_fact_sapcar_dict | d([]) + [__sap_hana_install_fact_sapcar_dict_tmp] }}"

    - name: SAP HANA hdblcm prepare - SAPCAR defined - Verify checksum for the SAPCAR executable
      ansible.builtin.include_tasks: verify_checksum.yml
      loop: "{{ __sap_hana_install_fact_sapcar_dict }}"
      loop_control:
        loop_var: __sap_hana_install_passed_file_dict
      when:
        - __sap_hana_install_fact_sapcar_dict | length > 0
        - sap_hana_install_verify_checksums

    - name: SAP HANA hdblcm prepare - SAPCAR defined - Set fact for the SAPCAR executable from variable
      ansible.builtin.set_fact:
        __sap_hana_install_fact_selected_sapcar_filename: "{{ sap_hana_install_sapcar_filename }}"

- name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Prepare the SAPCAR executable if 'sap_hana_install_sapcar_filename' is not defined
  when: sap_hana_install_sapcar_filename is not defined
  block:

    # Package 'file' is present in Base system, but this task ensures next task does not fail on hardened images.
    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Ensure file package is present
      ansible.builtin.package:
        name: file
        state: present

    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Create directory '{{ sap_hana_install_software_extract_directory }}/sapcar_tmp'
      ansible.builtin.file:
        path: "{{ sap_hana_install_software_extract_directory }}/sapcar_tmp"
        state: directory
        mode: '0755'

    # In the first step, we execute the file command for each of the SAPCAR EXE files. It displays the
    # hardware architecture in the second output field, using a string which is different from the output
    # of the 'uname -m' command.
    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Find matching SAR executables in '{{ __sap_hana_install_fact_software_directory }}'  # noqa risky-shell-pipe
      ansible.builtin.shell:
        cmd: find . -name 'SAPCAR*EXE' -exec file {} + | sed 's|^\./||'
      args:
        chdir: "{{ __sap_hana_install_fact_software_directory }}"
      register: __sap_hana_install_register_sapcar_file_contents
      changed_when: false

    # Loop through found files and compare them against search keywords for ansible_architecture.
    # Supported combinations are defined in the variable '__sap_hana_install_architecture_matrix' in vars/main.yml file.
    # Each platform can contain multiple search words. AND operator is achieved by counting all found keywords.
    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Compare found files against the variable ansible_architecture
      ansible.builtin.set_fact:
        __sap_hana_install_register_sapcar_matching_arch: |
          {%- set matching_files = [] -%}
          {%- set rule_sets = __sap_hana_install_architecture_matrix.get(ansible_architecture, []) -%}
          {%- if rule_sets -%}
            {%- for line in __sap_hana_install_register_sapcar_file_contents.stdout_lines -%}
              {%- set parts = line.split(': ', 1) -%}
              {%- if parts | length > 1 -%}
                {%- set filename = parts[0] -%}
                {%- set file_info = parts[1] -%}

                {# Create a list of boolean results for each rule set #}
                {%- set rule_results = [] -%}
                {%- for keyword_list in rule_sets -%}
                  {%- set all_keywords_found = (keyword_list | select('in', file_info) | list | length) == (keyword_list | length) -%}
                  {%- set _ = rule_results.append(all_keywords_found) -%}
                {%- endfor -%}

                {%- if true in rule_results -%}
                  {%- set _ = matching_files.append(filename) -%}
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          {{- matching_files -}}

    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Fail if no matching SAPCAR executable could be found
      ansible.builtin.fail:
        msg: "FAIL: No SAPCAR EXE file for architecture '{{ ansible_architecture }}' was found in
              {{ __sap_hana_install_fact_software_directory }}!"
      when: __sap_hana_install_register_sapcar_matching_arch | length == 0

    # After selecting the SAPCAR EXE files for the current architecture, we copy them to a temporary
    # directory sapcar_tmp in the software extract directory and then perform a checksum verification
    # for these files if the corresponding variable is set.
    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Copy matching SAPCAR executables to '{{ sap_hana_install_software_extract_directory }}/sapcar_tmp/'
      ansible.builtin.copy:
        src: "{{ __sap_hana_install_fact_software_directory }}/{{ item }}"
        dest: "{{ sap_hana_install_software_extract_directory }}/sapcar_tmp/{{ item }}"
        remote_src: true
        owner: 'root'
        group: 'root'
        mode: '0755'
      loop: "{{ __sap_hana_install_register_sapcar_matching_arch }}"

    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Fill list of dicts containing dir, file, and global checksum file
      ansible.builtin.set_fact:
        __sap_hana_install_fact_sapcar_dict: "{{ __sap_hana_install_fact_sapcar_dict | d([]) + [__sap_hana_install_tmp_sapcar_dict] }}"
      loop: "{{ __sap_hana_install_register_sapcar_matching_arch }}"
      vars:
        __sap_hana_install_tmp_sapcar_dict:
          dir: "{{ sap_hana_install_software_extract_directory }}/sapcar_tmp"
          file: "{{ item }}"
          checksum_file: "{{ sap_hana_install_global_checksum_file }}"
      when: sap_hana_install_global_checksum_file is defined

    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Fill list of dicts containing dir, file, and specific checksum file
      ansible.builtin.set_fact:
        __sap_hana_install_fact_sapcar_dict: "{{ __sap_hana_install_fact_sapcar_dict | d([]) + [__sap_hana_install_tmp_sapcar_dict] }}"
      loop: "{{ __sap_hana_install_register_sapcar_matching_arch }}"
      vars:
        __sap_hana_install_tmp_sapcar_dict:
          dir: "{{ sap_hana_install_software_extract_directory }}/sapcar_tmp"
          file: "{{ item }}"
          checksum_file: "{{ __sap_hana_install_fact_software_directory }}/{{ item }}.sha256"
      when: sap_hana_install_global_checksum_file is not defined

    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Verify checksum for SAPCAR executables
      ansible.builtin.include_tasks: verify_checksum.yml
      loop: "{{ __sap_hana_install_fact_sapcar_dict }}"
      loop_control:
        loop_var: __sap_hana_install_passed_file_dict
      when:
        - __sap_hana_install_fact_sapcar_dict | length > 0
        - sap_hana_install_verify_checksums


    # For each file in temporary directory sapcar_tmp in the software extract directory, we run it with option
    # --version and then identify the most recent one, which is then copied to directory sapcar.
    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Get version of all SAPCAR executable files  # noqa command-instead-of-shell
      ansible.builtin.command:
        cmd: "./{{ item }} --version"
      args:
        chdir: "{{ sap_hana_install_software_extract_directory }}/sapcar_tmp"
      loop: "{{ __sap_hana_install_register_sapcar_matching_arch }}"
      register: __sap_hana_install_register_sapcar_versions
      ignore_errors: true
      changed_when: false

    # Loop through found files and extract kernel and patch values before sorting them in descending order.
    # Resulting variable is used together with '| trim' to ensure that empty spaces are removed from shell command output.
    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Identify the SAPCAR executable with the latest version
      ansible.builtin.set_fact:
        __sap_hana_install_register_latest_sapcar_file: |
          {%- set files_with_versions = [] -%}
          {%- for result in __sap_hana_install_register_sapcar_versions.results -%}
            {%- if not result.failed -%}
              {# Use regex to find the kernel and patch numbers, defaulting to 0 if not found #}
              {%- set kernel = result.stdout | regex_search('kernel release\s+(\d+)', '\\1') | first | default(0) | int -%}
              {%- set patch = result.stdout | regex_search('patch number\s+(\d+)', '\\1') | first | default(0) | int -%}

              {# Append the structured data to our list #}
              {%- set _ = files_with_versions.append({'kernel': kernel, 'patch': patch, 'filename': result.item}) -%}
            {%- endif -%}
          {%- endfor -%}

          {# Sort by patch (secondary) then by kernel (primary) in descending order and return first one #}
          {%- set sorted_files = files_with_versions | sort(attribute='patch', reverse=true) | sort(attribute='kernel', reverse=true) -%}
          {{- sorted_files[0].filename if sorted_files else 'none' -}}

    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Set fact for SAPCAR executable from auto-detection
      ansible.builtin.set_fact:
        __sap_hana_install_fact_selected_sapcar_filename: "{{ __sap_hana_install_register_latest_sapcar_file | trim }}"

    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Display SAPCAR executable file name
      ansible.builtin.debug:
        msg: "Using SAPCAR executable: {{ __sap_hana_install_fact_selected_sapcar_filename }}"

    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Copy the autodetected SAPCAR executable to '{{ sap_hana_install_software_extract_directory }}/sapcar'
      ansible.builtin.copy:
        src: "{{ sap_hana_install_software_extract_directory }}/sapcar_tmp/{{ __sap_hana_install_fact_selected_sapcar_filename }}"
        dest: "{{ sap_hana_install_software_extract_directory }}/sapcar/{{ __sap_hana_install_fact_selected_sapcar_filename }}"
        remote_src: true
        owner: 'root'
        group: 'root'
        mode: '0755'
      when: not ansible_check_mode

    - name: SAP HANA hdblcm prepare - SAPCAR auto-detection - Remove directory '{{ sap_hana_install_software_extract_directory }}/sapcar_tmp'
      ansible.builtin.file:
        path: "{{ sap_hana_install_software_extract_directory }}/sapcar_tmp"
        state: absent

- name: SAP HANA hdblcm prepare - Make sure the SAPCAR executable has execute permissions and is owned by root
  ansible.builtin.file:
    path: "{{ sap_hana_install_software_extract_directory }}/sapcar/{{ __sap_hana_install_fact_selected_sapcar_filename }}"
    mode: '0755'
    owner: root
    group: root
  when: not ansible_check_mode
